









///////////////////////////////////////////////////////////////////////////

What is a Kernel Module?

* Modules are pieces of code that can be loaded and unloaded to into the
  kernel upon demand
* Extend the functionality without reboot
* Without module, we have to rebuild a monolithic kernel and reboot

page 9

///////////////////////////////////////////////////////////////////////////

init_module()	 ---insmod-->	register_capability()
callbacks		 <--call---		kernel
module calls	 ----------->	kernel exported functions
cleanup_module() <--rmmod--- 	unregister_capability()

page 10

///////////////////////////////////////////////////////////////////////////

Kernel Module - Start and End Functions

* Include headers
	#include <linux/kernel.h>
	#include <linux/module.h>
* implement a module start function
	* int init_module(void)
	* register with module_init(your_start_function) 
		* #include <linux/init.h>
		* static int __init your_start_function(void)
* implement a module exit function
	* void cleanup_module(void)
	* Unregister with module_exit(your_end_function)
		* #include <linux/init.h>
		* static int __exit your_end_function(void)

page 11

///////////////////////////////////////////////////////////////////////////

Module Exercise - Load Module

* Load the hello module into kernel
	$ insmod hello.ko 
* List all the modules loaded in kernel
	$ lsmod
	$ cat /proc/modules
* Open /var/log/kern.log file and see the "Hello! World!" messages
	$ tail /var/log/kern.log
* Remove the hello module from kernel
	$ rmmod hello
* See "Bye Bye" from /var/log/kern.log
	$ tail /var/log/kern.log

page 18

///////////////////////////////////////////////////////////////////////////

System log -- syslogd & klogd

* Start/stop the syslogd & klogd
	# /etc/init.d/syslog start/stop/restart
	# service syslog start/stop/restart
* When the module inserted or removed, the printk() message will be 
	written in /var/log/messages

page 17

///////////////////////////////////////////////////////////////////////////

Multiple Source

start.c, stop.c

page 19

///////////////////////////////////////////////////////////////////////////

Makefile for Multiple Source

obj-m += startstop.o
startstop-objs := start.o stop.o


Makefile =, :=, +=, ?=

///////////////////////////////////////////////////////////////////////////

COMPILE WITH EXTRA_CFLAGS

* benefit to use gcc diagnostic directive: 
	enabling the coder to know whether the codes are preperly compiled

/* example code */

#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/init.h>

static int __init helloworld_init(void)
{
#ifndef __TEST__
#warning "Test compile info"
//#error "Test compile info"
#endif
	printk("%s\n", __func__);
	return 0;
}

module_init(helloworld_init);

static void __exit helloworld_exit(void)
{
	printk("%s\n", __func__);
}

module_exit(helloworld_exit);

MODULE_LICENSE("Dual BSD/GPL");


///////////////////////////////////////////////////////////////////////////

# Compiling with -D__TEST__

* Define with EXTRA_CFLAGS in Makefile
	//Makefile for making multiple source
	EXTRA_CFLAGS += -D__TEST__
	obj-m += hello.o

* Build this module
	make V=1 -C /lib/modules/`uname -r`/build M=`pwd` modules
	V=1: verbose mode

page 21

///////////////////////////////////////////////////////////////////////////

MODULE ARGUMENTS
* module_param(name, type, perm)
* module_param_array(name, type, nump, perm)
	type: 
		byte, short, ushort, int, uint, long, ulong
		charp: a character pointer
		bool: a bool, values 0/1, y/n, Y/N
		invbool: the above, only sense-reversed (N = true)
	perm:
		user: S_IRWXU = S_IRUSR | S_IWUSR | S_IXUSR
		group: S_IRWXG = S_IRGRP | S_IWGRP | S_IXGRP
		other: S_IRWXO = S_IROTH | S_IWOTH | S_IXOTH
		most commonly used: (S_IRWXU | S_IRWXG)

```````````````````````````````````````````````````````````````````````````
int myint = 3;
module_param(myint, int, S_IRWXU | S_IRWXG);
```````````````````````````````````````````````````````````````````````````

* MODULE_PARM_DESC(var, desc)
	Describe the meaning of this variable "var"
```````````````````````````````````````````````````````````````````````````
MODULE_PARM_DESC(myint, "the counter");
```````````````````````````````````````````````````````````````````````````

page 24

///////////////////////////////////////////////////////////////////////////

LINUX_VERSION_CODE

#include <linux/version.h>

LINUX_VERSION_CODE
	The version of this kernel

KERNEL_VERSION(major, minor, release)

```````````````````````````````````````````````````````````````````````````
#if (LINUX_VERSION_CODE > KERNEL_VERSION(2,6,10)) // kernel above 2.6.10
	module_param_array(myintArray, int, &num_myintArray, 0444);
#elif (LINUX_VERSION_CODE > KERNEL_VERSION(2,6,0)) // from 2.6.0 to 2.6.10 kernel
	module_param_array(myintArray, int, num_myintArray, 0444);
#elif (LINUX_VERSION_CODE > KERNEL_VERSION(2,4,0)) // kernel above 2.4
	MODULE_PARM(myintArray, "1-2i");
#endif 

```````````````````````````````````````````````````````````````````````````

page 25

///////////////////////////////////////////////////////////////////////////

CHARACTER DEVICE DRIVER

Name Space
* Preventing naming polution:
	1. Declare all variables as static and to use a well-define prefix
	for for symbols (lowercase).
	2. To export a function or variable
		- EXPORT_SYMBOL(your_function_or_variable)
		- For 2.4 kernel must be compiled with this options:
		-DEXPORT_SYMTAB

Code Space
* Kernel has its own space of memory as well
* Module: dynamically insert and remove in the kernel. shares the kernel space
* If your module segfaults, the kernel segfaults.

Device Driver
* One class of module, which provides functionality for hardware.
* Linux programs treat most devices as files
	- Device files are located in '/dev' directory
* Provides a familiar programming interface
	- Standard C functions: open(), read(), etc
* Kernel uses number-pairs (major, minor)
	- Major Number:
		. Identify the driver assiciated with the device.
		. /usr/src/linux-x.x.x/Documentation/devices.txt
	- Minor Number:
		. The 'minor' number identifies the device

```````````````````````````````````````````````````````````````````````````

$ cat /proc/devics

Character devices:
  1 mem
  4 /dev/vc/0
  4 tty
  4 ttyS
  5 /dev/tty
  5 /dev/console
  5 /dev/ptmx
  5 ttyprintk
  6 lp
  7 vcs
 10 misc
 13 input
 21 sg
 29 fb
 89 i2c
 99 ppdev
108 ppp
116 alsa
128 ptm
136 pts
180 usb
189 usb_device
226 drm
244 mei
245 hidraw
246 aux
247 ptp
248 pps
249 bsg
250 watchdog
251 rtc
252 dimmctl
253 ndctl
254 tpm

Block devices:
259 blkext
  7 loop
  8 sd
  9 md
 11 sr
 65 sd
 66 sd
 67 sd
 68 sd
 69 sd
 70 sd
 71 sd
128 sd
129 sd
130 sd
131 sd
132 sd
133 sd
134 sd
135 sd
252 device-mapper
253 virtblk
254 mdp
total 0

```````````````````````````````````````````````````````````````````````````

brw-rw----  1 root disk        8,   0 Jan  3 09:01 sda
brw-rw----  1 root disk        8,   1 Jan  3 09:02 sda1
brw-rw----  1 root disk        8,   2 Jan  3 09:02 sda2
brw-rw----  1 root disk        8,   5 Jan  3 09:02 sda5

crw--w----  1 root tty         4,   0 Jan  3 09:01 tty0
crw--w----  1 root tty         4,   1 Jan  3 09:02 tty1


lrwxrwxrwx  1 root root            15 Jan  3 09:01 stderr -> /3yyproc/self/fd/2
lrwxrwxrwx  1 root root            15 Jan  3 09:01 stdin -> /proc/self/fd/0
lrwxrwxrwx  1 root root            15 Jan  3 09:01 stdout -> /proc/self/fd/1


crw-rw-rw-  1 root root        1,   5 Jan  3 09:01 zero

```````````````````````````````````````````````````````````````````````````

///////////////////////////////////////////////////////////////////////////

REGISTER CHAR DEVICE

* #include <linux/fs.h>
* Register a character device
	- int regsiter_chrdev(unsigned int major, 
							const char *name, 
							struct file_operations *fops);
		. Others: major number, "Documentation/devices.txt" 
		. if major = 0: Major number decides by kernel
		. if major != 0: attemp to use the given major number; return 0 on success
		. Device name, show up in /proc/devices
		. file operation table pointer. MUST not be NULL. MUST provide
			open, release, read, write, ioctl, or more.
* Unregister a character device
	- int unregister_chrdev(unsigned int, const char*)

```````````````````````````````````````````````````````````````````````````

major = register_chrdev(0, "char_reg", &fops);
if (major < 0) {
	printk("Registering the character device failed with %d\n", major);
	return -ENOPERM;
}

```````````````````````````````````````````````````````````````````````````

REGISTER CHAR DEVICE (NEW)

* #include <linux/fs.h>
* Register a range of device numbers for several character devices
	- int register_chrdev_region(dev_t from, unsigned count, const char *name)
	- from: first device number (major/minor) of the region
	- count: Total number of contiguous device numbers 
	(can cross major-minor boundary)
	- name: Device name, it appears at /proc/devices

```````````````````````````````````````````````````````````````````````````
retval = register_chrdev_region(MKDEV(major, minor), 1, "char_reg"); 
if (retval < 0) {
	printk("Fail register_chrdev_region(). error code=%d\n", retval);
	return retval;
}

```````````````````````````````````````````````````````````````````````````

int alloc_chrdev_region(
	dev_t *dev, 
	unsigned baseminor, 
	unsigned count, 
	const char *name
);


```````````````````````````````````````````````````````````````````````````
retval = alloc_chrdev_region(&devno, 0, 1, "char_reg");
if (retval < 0) {
	printk("Fail alloc_chrdev_region(). error code=%d\n", retval);
	return retval;
}

major = MAJOR(devno);
```````````````````````````````````````````````````````````````````````````

void unregister_chrdev_region(
	dev_t from,
	unsigned count
);


MAJOR(dev)
MINOR(dev)
MKDEV(ma, mi)

aaaaaaaa aaaaiiii iiiiiiii iiiiiiii
, where a as major, i as minor

///////////////////////////////////////////////////////////////////////////
#include <linux/cdev.h>

/* init a cdev structure */
void cdev_init(
	struct cdev *cdev,
	const struct file_operations *fops
);

/* add a char device to the system */
int cdev_add(
	struct cdev *p,
	dev_t dev,
	unsigned count
);

/* remove a cdev from the system */
void cdev_del(
	struct cdev *p
);

/* allocate a cdev structure */
struct cdev *cdev_alloc(void);



///////////////////////////////////////////////////////////////////////////

THE file_operations STRUCTURE

/* kernel 4.4.109 */
#include <linux/fs.h>
struct file_operations {
	struct module *owner;
	loff_t (*llseek) (struct file *, loff_t, int);
	ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
	ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
	ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
	ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
	int (*iterate) (struct file *, struct dir_context *);
	unsigned int (*poll) (struct file *, struct poll_table_struct *);
	long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
	long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
	int (*mmap) (struct file *, struct vm_area_struct *);
	int (*open) (struct inode *, struct file *);
	int (*flush) (struct file *, fl_owner_t id);
	int (*release) (struct inode *, struct file *);
	int (*fsync) (struct file *, loff_t, loff_t, int datasync);
	int (*aio_fsync) (struct kiocb *, int datasync);
	int (*fasync) (int, struct file *, int);
	int (*lock) (struct file *, int, struct file_lock *);
	ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
	unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
	int (*check_flags)(int);
	int (*flock) (struct file *, int, struct file_lock *);
	ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
	ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
	int (*setlease)(struct file *, long, struct file_lock **, void **);
	long (*fallocate)(struct file *file, int mode, loff_t offset,
			  loff_t len);
	void (*show_fdinfo)(struct seq_file *m, struct file *f);
#ifndef CONFIG_MMU
	unsigned (*mmap_capabilities)(struct file *);
#endif
};


///////////////////////////////////////////////////////////////////////////

C99 SYNTAX

* gcc since version 2.95

struct file_operations fops = {
	.read = device_read,
	.write = device_write,
	.open = device_open,
	.release = device_release,
};

///////////////////////////////////////////////////////////////////////////

MAKE SURE WHETHER USER MEMORY IS IN USER-LEVEL SPACE

#include <asm/uaccess.h>

access_ok(
	type,
	addr,
	size
);

type: VERIFY_READ, VERIFY_WRITE

addr and size come from read/write. Those functions provide two parameters
const char __user *addr, size_t size.


////////////////////////////////////////////////////////////////////////////

IOCTL

* used to get or set info to a driver
* prototype long (*compat_ioctl) (
	struct file *pfil, /* file descriptor for the appropriate device file */
	unsigned int cmd, /* ioctl number */
	unsigned long parameter); /* ioctl-command-associated argument */
* kernel documentation/ioctl-number.txt
* 

IOCTL NUMBER

#define IOCTL_SET_MSG _IOW(MAJOR_NUM, 0, char*)
#define IOCTL_GET_MSG _IOR(MAJOR_NUM, 1, char*)
#define IOCTL_GET_NTH_BYTE _IOWR(MAJOR_NUM, 2, int)


_IOC_TYPEBITS, length=8 bits, type : magic number 
_IO_NRBITS, length=8 bits, number : the sequential number
_IOC_SIZEBITS, length=14 bits, size : size of the data transfer
_IOC_DIRBITS, length= 2 bits, direction: direction of the data transfer

_IO(type, number)
_IOR(type, number, size)
_IOW(type, number, size)
_IOWR(type, number, size)

////////////////////////////////////////////////////////////////////////////

DATA TRANSFER BETWEEN KERNEL AND USER SPACE

/* access_ok is included */

#include <asm/uaccess.h>

/* the single-value transfer routines */
put_user(x, ptr)
get_user(x, ptr);

copy_to_user(to, from, n);
copy_from_user(to, from , n);

////////////////////////////////////////////////////////////////////////////

MANIPULATING STRINGS IN USER SPACE

#include <linux/uaccess.h>

long strlen_user(const char __user *);
long strnlen_user(const char __user *, long);
long strncpy_from_user(char *dst, cnost char __user *src, long count);



////////////////////////////////////////////////////////////////////////////



## Kernel Locking
* Why?
  * Synchronization in certain code paths in the kernel
  * Locking issues arise from
    * SMP (symmetric multiprocessing): True concurrency
	* Interrupt handlers
	* Preemptible kernel
	* Any code can block (go to sleep)

## Kernel Locking --- Semaphore
Multi-process mutual exclusion
  
## Kernel Locking --- Spinlock
Low level driver locking mechanism

* Spinlock functions
```
#include <linux/spinlock.h>
DEFINE_SPINLOCK(lock);
```
  * Lock functions
```
void spin_lock(spinlock_t *lock)
void spin_trylock(spinlock_t *lock)
```
  * Release a spin lock
```
void spin_unlock(spinlock_t *lock)
```
* A thread gets spinlock & later an interrupt requires the same lock
Deadlock if both calls spin\_lock(). Solution: let the thread disables interrupts while .

```
void spin_lock_irq(spinlock_t *lock)
void spin_lock_irqsave(spinlock_t *lock, unsigned long flags)
void spin_lock_bh(spinlock_t *lock, unsigned long flags)

void spin_unlock_irq(spinlock_t *lock)
void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
void spin_unlock_bh(spinlock_t *lock)
```
### Readers-writer spinlock
* Allow any number of readers into a critical section simultaneously, but writers must have exclusive.
```
#include <linux/spinlock.h>

```

reference:
1. kernel  Documentation/locking/spinlocks

## Kernel Locking --- Atmoic
Perform in one uninterruptible operation

### Atomic Variables (Integer)
* Defined in asm/atomic.h   
```
typedef struct {
	volatile int counter;
} atomic_t;
```
* Operation compiled as one single instruction
* Macros
```
#define atomic_read(v) ((v)->counter)
```
Return the current value of v.
```
#define atomic_set(v,i) (((v)->counter) = (i))
```
Set the atomic variable v to the integer value i.
```
#define ATOMIC_INIT(i) {(i)}
atomic_t v = ATOMIC_INIT(0);
```
Initialize an atomic variable.
* Atomic functions:
```
void atomic_add(int i, atomic_t *v)
```
Add i to the atomic variable pointed to by v.
```
void atomic_sub(int i, atomic_t *v)
```
Subtract i from \*v.
```
void atomic_dec(atomic_t *v)
void atomic_inc(atomic_t *v)
```
Increment or decrement an atomic variable.
```
void atomic_dec_and_test(atomic_t *v)
void atomic_inc_and_test(atomic_t *v)
void atomic_sub_and_test(int i, atomic_t *v)
```
Perform the specified operation and test the result; if, after the operation, the atomic value is -, then the return value is true; otherwise, it is false.

### Atomic Variables (Bit)
* Defined in asm/bitops.h
* Modify or test single bits in a single step, no interrupt (or other processor) can interfere.
* Atomic functions
```
void set_bit(nr, void *addr);
```
Sets bit number nr in the data item pointed to by addr
```
void clear_bit(nr, void *addr);
```
Clears the specified
```
void change_bit(nr, void *addr);
```
Toggles the bit
```
test_bit(nr, void *addr);
```
Returns the current value of the bit.
```
int test_and_set_bit(nr, void *addr);
```
Set a bit and return its old value
```
int test_and_clear_bit(nr, void *addr);
```
Clear a bit and return its old value
```
int test_and_change_bit(nr, void *addr);
```
Change a bit and return its new value


## Kernel Locking --- Caveats
  * Semaphore:
    * The lock-held time may be long.
	* Can not synchronize the interrupt context.
  * Spinlock:
    * Do not to re-acquire a spinlock you already hold
	* Do not hold for a long time.
	* Do not do anything that will sleep.
  * Atomic:
    * Some architectures do not expect atomic_t to have more than 24 usable bits.
	* Cannot pass anything to an atomic operator except an atomic_t.




///////////////////////////////////////////////////////////////////////////

CAT BUFFER AREA
```````````````````````````````````````````````````````````````````````````




ifneq ($(KERNELRELEASE),)
	obj-m += helloworld.o
	helloworld-objs := init.o
else
#	KDIR := /lib/modules/`uname -r`/build
	KDIR := /home/a003257/avm/t533c/T533C_40/osdrv/opensource/kernel/linux-3.18.y
	ARCH := arm
	CC := arm-hisiv500-linux-
all:
	ARCH=$(ARCH) CROSS_COMPILE=$(CC) $(MAKE) V=1 -C $(KDIR) M=$$PWD

clean:
	ARCH=$(ARCH) CROSS_COMPILE=$(CC) $(MAKE) V=1 -C $(KDIR) M=$$PWD clean
endif
