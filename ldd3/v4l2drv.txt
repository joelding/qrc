V4L2 DRIVERS

Q: How to write an i2c-controlled video decoder/encoder driver?
Q: What is a media framework? How does this relate to V4L2 driver?

///////////////////////////////////////////////////////////////////////////

History

	2017/11/01 init




///////////////////////////////////////////////////////////////////////////

references:

1. kernel source code/Documentation/video4linux: v4l2-framework.txt, v4l2-controls.txt
1. kernel source code/Documentation/media-framework.txt

2. An Introduction to the Video4Linux Framework by Verkuil [link](https://archive.fosdem.org/2014/schedule/event/v4l_intro/attachments/slides/448/export/events/attachments/v4l_intro/slides/448/v4l2_frameworks.pdf)
3. Linux Media Subsystem Documentation [link](https://linuxtv.org/downloads/v4l-dvb-apis/)

V4L2框架之视频监控【参考】韦东山 教学视频
http://www.cnblogs.com/Hello-words/p/6178640.html

vivid: Virtual Video Test Driver
Documentation/video4linux/vivid.txt

The VIVI driver; a great starting point for V4L2 driver writers 
https://lwn.net/Articles/203971/

V4L2 driver Step by Step
http://cuteparrot.pixnet.net/blog/category/3020617

The Video4Linux2 API: an introduction
https://lwn.net/Articles/203924/

TI811X PSP Adding External Decoders to V4L2 Capture Driver
http://processors.wiki.ti.com/index.php/TI811X_PSP_Adding_External_Decoders_to_V4L2_Capture_Driver

///////////////////////////////////////////////////////////////////////////

Introduction to V4L2 drivers

	* tend to be complex
		* involving multiple ICs, device nodes, non-V4L2 devices
		* non-V4L2 devices: DVB, ALSA, FB, I2C, and IR devices
	* setup "sub-devices"
  		* audio/video muxing/encoding/decoding ICs
  		* connected to the main bridge driver through I2C busses
		* bus or host controller is called a parent device

solution to complexity: V4L2 framework

	* refactors common code
	* provides basic building blocks
	* example: v4l2-pci-skeleton.c, a skeleton driver for a PCI capture card
	
///////////////////////////////////////////////////////////////////////////

V4L2 drivers must

	* have the device state: one for each device instance
	* be able to init and command sub-devices (if any)
	* be able to create v4l2 device nodes and manage device-node specific data
	* Filehandle-specific structs and per-filehandle data
	* handle video buffer 

	device instances: struct v4l2_device, better named as v4l2_root
		|
		+-sub-device instances: struct v4l2_subdev
		|
		\-V4L2 device nodes: struct video_device 
			|
			\-filehandle instances: struct v4l2_fh 

	* optionally integrates with the media framework
		* by setting the mdev field of struct v4l2_device
		* sub-devices and video nodes will automatically appear 
		  in the media framework as entities

///////////////////////////////////////////////////////////////////////////

APIs of struct v4l2_device

status: hard to go on. No find examples in source.

/* If integrating with the media device framework:
 * point dev->driver_data to the driver-specific device structure
 */
dev_set_drvdata(struct device *dev, void *data);

#include <media/v4l2-device.h>

/* register the device instance
 * 1. init v4l2_device struct
 * 2. If the dev->driver_data field is NULL, it will be linked to v4l2_dev.
 */
v4l2_device_register(struct device *dev, struct v4l2_device *v4l2_dev);

/* unregister the device instance
 * 1. free dev->driver_data if it is not pointing to v4l2_dev
 * 2. set dev->driver_data to NULL
 */
v4l2_device_unregister(struct v4l2_device *v4l2_dev);

v4l2_device_set_name(struct v4l2_device *v4l2_dev, const char *basename,
	atomic_t *instance);

/* hotpluggable device: mark the parent is gone
 */
v4l2_device_disconnect(struct v4l2_device *v4l2_dev);
v4l2_device_unregister(struct v4l2_device *v4l2_dev);




/* increase/decrease the refcount 
 */
void v4l2_device_get(struct v4l2_device *v4l2_dev);
int v4l2_device_put(struct v4l2_device *v4l2_dev);

///////////////////////////////////////////////////////////////////////////
status: need read the doc and summarize more times! 2017/12/01

APIs of struct v4l2_subdev

	* Each sub-device driver must have a v4l2_subdev struct.
	* stand-alone for simple sub-devices
	* embedded in a larger struct, state information


#include <media/v4l2-subdev.h>

struct chipname_state {
	struct v4l2_subdev sd;
	struct i2c_client client;
	struct v4l2_ctrl_handler ctrl_handler;
		
};


	* The kernel sends a low-level device struct i2c_client, representing an I2C slave device

in include/linux/i2c.h
struct i2c_client {
	unsigned short flags;
	unsigned short addr; /* 7bit address */
	char name[I2C_NAME_SIZE];
	struct i2c_adapter *adapter;
	struct device dev;
	int irq;
	struct list_head dtected;
};

struct v4l2_subdev_ops chipname_subdev_ops = {
	const struct v4l2_subdev_core_ops *core;
	const struct v4l2_subdev_tuner_ops *tuner;
	const struct v4l2_subdev_audio_ops *audio;
	const struct v4l2_subdev_video_ops *video;

	/* to process video and integrate with the media framework
	 * not use const struct v4l2_subdev_video_ops *;
	 */
	const struct v4l2_subdev_pad_ops *pad;
};

static int chipname_probe(	struct i2_client *client, 
							const struct i2c_device_id *id ) 
{
	struct chipname_state *state;
	struct v4l2_subdev *sd;

	state = devm_kzalloc(client->sizeof(struct chipname_state), GFP_KERNEL); 
	/* if fail return -ENOMEM */

	state->client = client;
	sd = &state->sd;

	v4l2_subdev_init(sd, &chipname_subdev_ops);
	sd->flags |= V4L2_SUBDEV_FL_IS_I2C;
	sd->owner = client->dev.driver->owner; /* set the module owner */
	sd->dev = &client->dev;
	v4l2_set_subdevdata(&state->sd, client);
	i2c_set_clientdata(client, &state->sd);
	snprint(sd->name, sizeof(sd->name), "%s %d=%04x", 
		client->dev.driver->name, i2c_adapter_id(client->adapter), client->addr);
	/* i2c helper function: 
	 * v4l2_i2c_subdev_init(&state->sd, client, &chipname_subdev_ops) 
	 */

	/* sd->flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
	 * v4l2_device_register_subdev_nodes();
	 */

	struct media_pad *pads = &sd->pads;
	int err = media_entity_init(&sd->entity, npads, pads, 0);



	media_entity_cleanup(&sd->entity);
}

# to register subdevices to the V4L2 core

	* diff in the probing process; same elsewhere

	1. The bridge drivers registers subdevices synchronously
		* for internal subdevices, such as video data processing units within 
	  	  SoCs or PCIe boards
		* information about subdevices is available
		
int err = v4l2_device_register_subdev(v4l2_dev, sd);
v4l2_device_unregister_subdev(sd);

	2. subdevices are registered asynchronously
		* defined in a Device Tree based system as I2C device nodes
		* information about subdevices is available to the system independently 
		  from the bridge devices

v4l2_async_register_subdev();
v4l2_async_unregister_subdev();
v4l2_async_notifier();


///////////////////////////////////////////////////////////////////////////

# I2C sub-device drivers

	* refer to [1] line 498~
	* when the kernel enables I2C (CONFIG_I2C)
	* when the kernel enables SPI (CONFIG_SPI)
	* 

#include <v4l2/v4l2-common.h>

struct chipname_state {
	struct v4l2_subdev sd;
	struct i2c_client client;
	struct v4l2_ctrl_handler ctrl_handler;
		
};

struct chipname_state *state;


#include <v4l2/v4l2-common.h>

/* in _probe()
 * fill in all the fields of v4l2_subdev;
 * the v4l2_subdev and i2c_client point to one another 
 */
v4l2_i2c_subdev_init(&state->sd, client, subdev_ops); 
v4l2_spi_subdev_init(&state->sd, client, subdev_ops); 


static inline struct chipname_state *to_state(struct v4l2_subdev *sd)
{
	return container_of(sd, struct chipname_state, sd);
}

/* Go from v4l2_subdev to i2c_client */
struct i2c_client *client = v4l2_get_subdevdata(sd);

/* Go from i2c_client to v4l2_subdev */
struct v4l2_subdev *sd = i2c_get_clientdata(client);

/* in _remove()
 */
v4l2_device_unregister_subdev(sd);
i2c_unregister_device(sd);

//////////////////////////////////////////////////////////////////////////


/* The bridge driver loads the given module
 */
struct v4l2_subdev *sd = 
	v4l2_i2c_new_subdev(struct v4l2_device *v4l2_dev,
						struct i2c_adapter *adapter, 
						const char *client_type, 
						u8 addr, 
						const unsigned short *probe_addrs);
note: kernel 3.18.y said 5 parameters while kernel doc said 6.
note: v4l2_spi_new_subdev(...);

v4l2_i2c_new_subdev_cfg()
note: no longer available in kernel 3.18.y 
	
struct v4l2_subdev *sd = 
	v4l2_i2c_new_subdev_board(struct v4l2_device *v4l2_dev,
							  struct i2c_adapter *adapter, 
							  struct i2c_board_info *info,
							  const unsigned short *probe_addrs);






///////////////////////////////////////////////////////////////////////////

# struct video_device

	* to create device nodes in /dev

#include <v4l2/v4l2-dev.h>
struct video_device *vdev = video_device_alloc();
if (vdev == NULL) return -ENOMEM;

vdev->release = video_device_release;

err = video_register_device(vdev, VFL_TYPE_GRABBER, -1);
if (err) {
	video_device_release(vdev);
	return err;
}

void *video_get_drvdata(struct video_device *vdev);
void video_set_drvdata(struct video_device *vdev, void *data);




///////////////////////////////////////////////////////////////////////////

# video buffer




///////////////////////////////////////////////////////////////////////////



CEA-861-E timings: v4l2-dv-timings.h

Kernel Recipes 2017 - HDMI CEC: Status Report - Hans Verkuil [link](https://youtu.be/4D8Om3NPikU)
HDMI CEC: What? Why? How? by Hans Verkuil [link](https://youtu.be/sk4oit_wykM)




///////////////////////////////////////////////////////////////////////////

V4L2 CONTROL API

	- How do I add a control
	- How do I set/get the control's value?
	- How do I validate the user's proposed control value?

2 main objects
	- struct v4l2_ctrl
		- describes the control properties
		- keep track of the control's value
	- v4l2_ctrl_handler
		- keep track of controls
		- maintain a list of v4l2_ctrl objects

struct chipname_state {

/* V4L2 drivers */
	struct v4l2_device v4l2_dev;
/* , or sub-device drivers */
	struct v4l2_subdev sd;

	struct v4l2_ctrl_handler ctrl_handler;
	...
};

v4l2_ctrl_handler_init(&state->ctrl_handler, nr_of_controls);

/* V4L2 drivers */
state->v4l2_dev.ctrl_handler = &state->ctrl_handler;
	
/* , or sub-device drivers */
state->sd.ctrl_handler = &state->ctrl_handler;

v4l2_ctrl_handler_free(&state->ctrl_handler);

Add controls
	- non-menu control
		struct v4l2_ctrl *v4l2_ctrl_new_std();
	- menu and integer menu control
		struct v4l2_ctrl *v4l2_ctrl_new_std_menu();
	- menu controls with a driver specific menu
		struct v4l2_ctrl *v4l2_ctrl_new_std_menu_items();
	- integer menu controls with a driver specific menu
		struct v4l2_ctrl *v4l2_ctrl_new_int_menu();

Force initial control setup
	- v4l2_ctrl_handler_setup(&state->ctrl_handler);

Implement v4l2_ctrl_ops

static const struct v4l2_ctrl_ops chipname_ctrl_ops = {
	.s_ctrl = chipname_s_ctrl;
};

///////////////////////////////////////////////////////////////////////////

CUSTOM CONTROLS

static const struct v4l2_ctrl_config ctrl_filter = {
};

v4l2_ctrl_new_cutom(&chipname->ctrl_handler, &ctrl_filter, NULL);


///////////////////////////////////////////////////////////////////////////

用vivi和xawtv學習V4L2驅動和應用編程 (初體驗)
最後更新：2013/02/22

在Ubuntu 10.04上，很容易看一下這個實驗的結果：
$ # 安裝xawtv
$ sudo apt-get install xawtv
$ # 安裝vivi驅動
$ cd /lib/modules/2.6.32-42-generic/kernel/drivers/media/video
$ sudo modprobe -a vivi
$ # 執行xawtv
$ xawtv

結果：可以看到xawtv開了一個視窗，有color bar由右到左像跑馬燈一樣。
