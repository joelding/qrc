
LINUX DEVICE DRIVERS

This is my notes on programming Linux device drivers.

///////////////////////////////////////////////////////////////////////////

History

	2017/10/25	init

///////////////////////////////////////////////////////////////////////////

References

1. LDD3
1. 宋宝华, Linux设备驱动开发详解:基于最新的Linux4.0内核, 机械工业出版社 2015年8月1日

///////////////////////////////////////////////////////////////////////////


MAKEFILE

= 是最基本的賦值
:= 會覆蓋變數之前的值
?= 變數為空時才給值，不然則維持之前的值
+= 將值附加到變數的後面

///////////////////////////////////////////////////////////////////////////

Kernel Drivers for I2C/SMBus Devices

* may not be necessary since i2c-dev.c prepares such drivers of major number 89. See
```
# ls -l /dev | grep 'i2c'
```

* of built-in type must implement
```
struct I2c_device_id foo_idtable = {
	{"foo", 0}, /* name up to 20 characters, driver_data */
	{} /* end of list */
};
MODULE_DEVICE_TABLE(i2c, foo_idtable);

struct i2c_driver foo_driver = {
	.driver = {
		.name = "foo",
		.owner = THIS_MODULE,
	},

	.id_table = foo_idtable,
	.probe = foo_probe,
	.remove = foo_remove,
}
```

* of autodetection type must implement extra callbacks
```
	.class = I2C_CLASS_SOMETHING,
	.detect = foo_detect,
	.address_list = normal_i2c,
```

* registers during initialization
```
static init __init foo_init(void)
{
	return i2c_add_driver(&foo_driver);
}
module_init(foo_init);

static void __exit foo_exit(void)
{
	return i2c_del_driver(&foo_driver);
}
module_exit(foo_exit);

MODULE_LICENSE("GPL");
```


references:
1. 宋宝华, Linux设备驱动开发详解. section 15.4
1. Documentation/i2c/writing-clients

///////////////////////////////////////////////////////////////////////////

MISCELLANEOUS CHARACTER DRIVERS

	* are not found in LDD3 book
	* have been existing since 2.0 kernel
	* support custom hacks
	* show as character devices with major number 10 with the following commands

# ls -l /dev
# cat /proc/devices

* APIs (kernel 3.18)

#include <linux/miscdevice.h>
struct file_operations foo_fops = {

};
struct miscdevice * foo_dev = {
	.minor	=	MISC_DYNAMIC_MINOR, //a minor number is assigned by kernel
	.name	=	"foo",
	.fops	=	&foo_fops,
};

static init __init foo_init(void)
{
	int ret;
	ret = misc_register(&foo_dev);
	/* TODO: handle error */

	return ret;
}
module_init(foo_init);

static void __exit foo_exit(void)
{
	misc_deregister(&foo_dev);
}
module_exit(foo_exit);


REFERENCES:

	1. Docs » The Linux driver implementer’s API guide » Miscellaneous Devices 
	[link] https://www.kernel.org/doc/html/v4.12/driver-api/misc_devices.html
	
	2. Miscellaneous Character Drivers, Jun 30, 1998  By Alessandro Rubini 
	[link] http://www.linuxjournal.com/article/2920
	
	3. 
	[link] http://nano-chicken.blogspot.tw/2009/12/linux-modules6-miscdev.html
	
	4. misc_register和register_chrdev的区别
	[link] http://blog.csdn.net/armeasy/article/details/7197936
	
///////////////////////////////////////////////////////////////////////////
## Netlink / Netlink sock family
* is a Linux interface used for inter-process communication between both the kernel and userspace processes, and between different userspace processes
* has benefits over other communcations such as system calls, ioctls or proc filesystems
  * is relatively trivial
  * is a full-duplex communication link
  * is asynchronous
  * enables loadable module
  * supports multicast

* uses standard socket APIs for user-space processes
```

```
* uses a special kernel API for kernel modules (kernel 3.18)
```
#include <linux/netlink.h>
struct sock *netlink_kernel_create(struct net *net, int unit, struct netlink_kernel_cfg *cfg);
void netlink_kernel_release(struct sock *sk);

```

references:
  * Wiki [link](https://en.wikipedia.org/wiki/Netlink)
  * Kernel Korner - Why and How to Use Netlink Socket, Jan 05, 2005  By Kevin Kaichuan He [link](http://www.linuxjournal.com/article/7356)
  * Linux中与内核通信的Netlink机制 [link](http://www.linuxidc.com/Linux/2011-07/39085.htm)


///////////////////////////////////////////////////////////////////////////

WAIT QUEUE

- Let the current task sleep
- The scheduler will not execute the task until it is waken up

#include <linux/wait.h>

typedef struct __wait_queue wait_queue_t; 

/* declare a queue and a condition variable
 */
DECLARE_WAIT_QUEUE_HEAD(name);
static int bCondition;

/* check if the wait queue is empty
 * return 1: there are processes in the wait queue
 * return 0: no process in the wait queue
 */
int waitqueue_active(wait_queue_t *q);

/* wait for some event
 * could be waken up by signal
 * condition: wake up when the condition is true
 */
wait_event_interruptible(wq, condition); 

/* could NOT be waken up by signal
 */
wait_event(wq, condition);

/* wake up the interruptible process
 */
wake_up_interruptible(wait_queue_t *q);

/* wake up all processes
 */
wake_up(wait_queue_t *q);

LAB: block/nonblock mode
chardev_nonblock/nonblock.c

///////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////







///////////////////////////////////////////////////////////////////////////

page 40

Device Driver

* One class of module, which provides functionality for hardware
* Linux programs treat most devices as files
	- Device files are located in '/dev' directory
* Provides a familiar programming interface
	- Standard C functions: open(), read(), etc
* Kernel uses number-paris (major, minor) 
	- Major Number:
		. Identify the driver associated with the device
		. /usr/src/linux-`uname -r`/Documentation/devices.txt
	- Minor Number:	
		. The 'minor' number identifies the device


///////////////////////////////////////////////////////////////////////////

What is a Kernel Module?

* Modules are pieces of code that can be loaded and unloaded to into the
  kernel upon demand
* Extend the functionality without reboot
* Without module, we have to rebuild a monolithic kernel and reboot

page 9

///////////////////////////////////////////////////////////////////////////

init_module()	 ---insmod-->	register_capability()
callbacks		 <--call---		kernel
module calls	 ----------->	kernel exported functions
cleanup_module() <--rmmod--- 	unregister_capability()

page 10

///////////////////////////////////////////////////////////////////////////

Kernel Module - Start and End Functions

* Include headers
	#include <linux/kernel.h>
	#include <linux/module.h>
* implement a module start function
	* int init_module(void)
	* register with module_init(your_start_function) 
		* #include <linux/init.h>
		* static int __init your_start_function(void)
* implement a module exit function
	* void cleanup_module(void)
	* Unregister with module_exit(your_end_function)
		* #include <linux/init.h>
		* static int __exit your_end_function(void)

page 11

///////////////////////////////////////////////////////////////////////////

# Compiling with -D__TEST__

* Define with EXTRA_CFLAGS in Makefile
	//Makefile for making multiple source
	EXTRA_CFLAGS += -D__TEST__
	obj-m += hello.o

* Build this module
	make V=1 -C /lib/modules/`uname -r`/build M=`pwd` modules
	V=1: verbose mode


///////////////////////////////////////////////////////////////////////////

# Character Device Driver

# Name Space
	* Preventing naming polution:
		1. Declare all your variables as static and to use a well-define prefix
		for for your symbols (lowercase).
		2. To export a function or variable
			- EXPORT_SYMBOL(your_function_or_variable)
			- For 2.4 kernel must be compiled with this options:
			-DEXPORT_SYMTAB

# Code Space
	* Kernel has its own space of memory as well
	* Module: dynamically insert and remove in the kernel. shares the kernel space
	* If your module segfaults, the kernel segfaults.

# Device Driver
	* One class of module, which provides functionality for hardware.
	* Linux programs treat most devices as files
		- Device files are located in '/dev' directory
	* Provides a familiar programming interface
		- Standard C functions: open(), read(), etc
	* Kernel uses number-pairs (major, minor)
		- Major Number:
			. Identify the driver assiciated with the device.
			. /usr/src/linux-2.x.x/Documentation/devices.txt
		- Minor Number:
			. The 'minor' number identifies the device

# Register Char Device
	* Register a character device
		- int regsiter_chrdev(unsigned int, const char*, struct file_operations*);
			. Others: major number, "Documentation/devices.txt" 
			. 0: Major number decides by kernel
			. Device name, it appears at /proc/devices
			. file operation table pointer
	* Unregister a character device
		- int unregister_chrdev(unsigned int, const char*)

```
major = register_chrdev(0, "char_reg", &fops);
if (major < 0) {
	printk("Registering the character device failed with %d\n", major);
}
```

# Register Char Device (New)
	* #include <linux/fs.h>
	* Register character device
		- int register_chrdev_region(dev_t from, unsigned count, const char *name)
		- from: first device number (major/minor) of the region
		- count: Total number of contiguous device numbers 
		(can cross major-minor boundary)
		- name: Device name, it appears at /proc/devices

```
if (register_chrdev_region(MKDEV(major, minor), 1, "char_reg") < 0) {
	printk("register_chrdev_region() fail\n");
}
```

		- int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count,
const char *name)
```
if (alloc_chrdev_region(&devno, 0, 1, "char_reg") < 0) {
	printk("alloc_chrdev_region() fail\n");
}
major = MAJOR(devno);
```

	* Unregister a character device
		- void unregister_chrdev_region(dev_t from, unsigned count)



///////////////////////////////////////////////////////////////////////////////



## Kernel Locking
* Why?
  * Synchronization in certain code paths in the kernel
  * Locking issues arise from
    * SMP (symmetric multiprocessing): True concurrency
	* Interrupt handlers
	* Preemptible kernel
	* Any code can block (go to sleep)

## Kernel Locking --- Semaphore
Multi-process mutual exclusion
  
## Kernel Locking --- Spinlock
Low level driver locking mechanism

* Spinlock functions
```
#include <linux/spinlock.h>
DEFINE_SPINLOCK(lock);
```
  * Lock functions
```
void spin_lock(spinlock_t *lock)
void spin_trylock(spinlock_t *lock)
```
  * Release a spin lock
```
void spin_unlock(spinlock_t *lock)
```
* A thread gets spinlock & later an interrupt requires the same lock
Deadlock if both calls spin\_lock(). Solution: let the thread disables interrupts while .

```
void spin_lock_irq(spinlock_t *lock)
void spin_lock_irqsave(spinlock_t *lock, unsigned long flags)
void spin_lock_bh(spinlock_t *lock, unsigned long flags)

void spin_unlock_irq(spinlock_t *lock)
void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
void spin_unlock_bh(spinlock_t *lock)
```
### Readers-writer spinlock
* Allow any number of readers into a critical section simultaneously, but writers must have exclusive.
```
#include <linux/spinlock.h>

```

reference:
1. kernel  Documentation/locking/spinlocks

## Kernel Locking --- Atmoic
Perform in one uninterruptible operation

### Atomic Variables (Integer)
* Defined in asm/atomic.h   
```
typedef struct {
	volatile int counter;
} atomic_t;
```
* Operation compiled as one single instruction
* Macros
```
#define atomic_read(v) ((v)->counter)
```
Return the current value of v.
```
#define atomic_set(v,i) (((v)->counter) = (i))
```
Set the atomic variable v to the integer value i.
```
#define ATOMIC_INIT(i) {(i)}
atomic_t v = ATOMIC_INIT(0);
```
Initialize an atomic variable.
* Atomic functions:
```
void atomic_add(int i, atomic_t *v)
```
Add i to the atomic variable pointed to by v.
```
void atomic_sub(int i, atomic_t *v)
```
Subtract i from \*v.
```
void atomic_dec(atomic_t *v)
void atomic_inc(atomic_t *v)
```
Increment or decrement an atomic variable.
```
void atomic_dec_and_test(atomic_t *v)
void atomic_inc_and_test(atomic_t *v)
void atomic_sub_and_test(int i, atomic_t *v)
```
Perform the specified operation and test the result; if, after the operation, the atomic value is -, then the return value is true; otherwise, it is false.

### Atomic Variables (Bit)
* Defined in asm/bitops.h
* Modify or test single bits in a single step, no interrupt (or other processor) can interfere.
* Atomic functions
```
void set_bit(nr, void *addr);
```
Sets bit number nr in the data item pointed to by addr
```
void clear_bit(nr, void *addr);
```
Clears the specified
```
void change_bit(nr, void *addr);
```
Toggles the bit
```
test_bit(nr, void *addr);
```
Returns the current value of the bit.
```
int test_and_set_bit(nr, void *addr);
```
Set a bit and return its old value
```
int test_and_clear_bit(nr, void *addr);
```
Clear a bit and return its old value
```
int test_and_change_bit(nr, void *addr);
```
Change a bit and return its new value


## Kernel Locking --- Caveats
  * Semaphore:
    * The lock-held time may be long.
	* Can not synchronize the interrupt context.
  * Spinlock:
    * Do not to re-acquire a spinlock you already hold
	* Do not hold for a long time.
	* Do not do anything that will sleep.
  * Atomic:
    * Some architectures do not expect atomic_t to have more than 24 usable bits.
	* Cannot pass anything to an atomic operator except an atomic_t.
