
///////////////////////////////////////////////////////////////////////////////
11/02

Q: v4l2-framework.txt does not talk about video buffer. What else talks about it?

Q: How to use I2S of Si3519V101 and make HDMI out with stereo audio? (Dave)

On the chip, pins relating to I2S input and output are:
AB23: JTAG_EN

AB24: I2S_BCLK_TX
AC23: I2S_WS_TX
AD23: I2S_SD_TX

AC24: I2S_MCLK

AC22: I2S_BCLK_RX
AB21: I2S_WS_RX
AD22: I2S_SD_RX

1. Remove R74 to disable JTAG function
2. Connect to SD0/1/2/3/MCLK/SCK/WS_DR0

Q: How to select pin functions of Si3519V101 (setup pin multiplexing)?

Q: hisi-hi3519v101-demb.dts and hisi-hi3519v101-hmp-demb.dts - which is in use?

Q: How does a bootloader bring dtb to kernel?
bootm <address> - <>

///////////////////////////////////////////////////////////////////////////////
11/01

How to write an i2c-controlled video decoder/encoder driver?

* V4L2 driver tends to be complex. 
  => V4L2 framework, providing basic building blocks
* V4L2 drivers apple to audio/video muxing/encoding/decoding ICs, "sub-devices",
  * connected to the main bridge driver through I2C busses
  * bus or host controller is called a parent device
* example: v4l2-pci-skeleton.c, a skeleton driver for a PCI capture card
* structure of a driver must have
  * the device state: one for each device instance
  * a way to init and command sub-devices
  * create v4l2 device nodes and device-node specific data
  * Filehandle-specific structs and per-filehandle data
  * video buffer handling

references:
1. Overview of the V4L2 driver framework [link](http://elixir.free-electrons.com/linux/v3.18.20/source/Documentation/video4linux/v4l2-framework.txt)
2. [link](http://elixir.free-electrons.com/linux/v3.18.20/source/Documentation/video4linux/v4l2-controls.txt)
3. [link](https://archive.fosdem.org/2014/schedule/event/v4l_intro/attachments/slides/448/export/events/attachments/v4l_intro/slides/448/v4l2_frameworks.pdf)




struct xxx_state {
	struct v4l2_subdev sd;
	struct v4l2_ctrl_handler ctrl_handler;
	...
};


#include <v4l2/v4l2-common.h>

/* fill in all the fields of v4l2_subdev;
   ensure the v4l2_subdev and i2c_client both point to one another */
v4l2_i2c_subdev_init(&state->sd, client, subdev_ops); 

v4l2_ctrl_handler_init(&state->ctrl_handler, nr_of_controls);

static inline struct xxx_state *to_state(struct v4l2_subdev *sd)
{
	return container_of(sd, struct xxx_state, sd);
}

struct i2c_client *client = v4l2_get_subdevdata(sd);
struct v4l2_subdev *sd = i2c_get_clientdata(client);


v4l2_device_unregister_subdev(sd);


TODO:
v4l2_i2c_new_subdev(v4l2_dev, adapter, "module_foo", "chipid", 0x36, NULL);



---------------------------------------------------------------------------------------

sample_tde shows a quarter sized backgroud with some pictures moving around.



---------------------------------------------------------------------------------------
Good resoures: http://free-electrons.com/doc/legacy/


-------------------------------------------------------------------------------








object檔修改工具 - objcopy


-------------------------------------------------------------------------------

## 亂序執行
* out-of-order execution
* aka: OoOE, OOE

ref
* Out-of-order execution [link](https://en.wikipedia.org/wiki/Out-of-order_execution)
* 乱序执行 [link](https://zh.wikipedia.org/wiki/%E4%B9%B1%E5%BA%8F%E6%89%A7%E8%A1%8C)

-------------------------------------------------------------------------------

ref
* http://capricorn-liver.blogspot.tw/2010/11/cbmp.html

-------------------------------------------------------------------------------
## GUID Partition Table
* aka GPT
* a part of the Unified Extensible Firmware Interface (UEFI) standard, as a replacement for the PC BIOS
* MBR (Master boot record) partitioning scheme
  * The original version of the MBR was written by David Litton of IBM in June 1982
  * introduced with IBM PC DOS 2.0 in March 1983 in order to support the 10 MB hard disk of the then-new IBM Personal Computer XT, still using the FAT12 file system
  * use 32 bits for storing block addresses
  * limit: 512 bytes/sector * (2 ^ 32) = 2 ^ 41 = 2 Tbytes maximum

* advantages over the MBR: 
  * use 64 bits for storing block addresses
  * limit: 512 bytes/sector * (2 ^ 64) = 2 ^ 73 = 8 Zbytes maximum
  * more partitions is possible, depending on operating system supports
  * TODO
    
* Major Linux distros support GPT: Fedora above 8, Ubuntu above 8.04+ with tools such as gdisk, GNU Parted, util-linux v2.23+ fdisk, SYSLINUX, GRUB 0.96 + patches and GRUB 2 have been GPT-enabled.
  * kernel config CONFIG_EFI_PARTITION option enables GPT support in the kernel
    
  * command "blkid"
  * command "gdisk"
  * command "lsblk"
  
* ref
  * wiki MBR [link](https://en.wikipedia.org/wiki/Master_boot_record)
  * wiki GPT [link](https://en.wikipedia.org/wiki/GUID_Partition_Table)
  * k-M-G-T-P-E-Z-Y [link](http://ioanaspune.ro/wp-content/uploads/2015/03/tabel-1014x1024.jpg)
  * GPT kernel support [link](https://wiki.archlinux.org/index.php/partitioning#GPT_Kernel_Support)
  * TI Linux Core U-Boot User's Guide talking about how to use u-boot to make a GPT eMMC and boot from it [link](http://processors.wiki.ti.com/index.php/Linux_Core_U-Boot_User%27s_Guide)
  
## File System
  
  
  
* ref
  * Kernel NTFS driver vs NTFS-3G [link](https://superuser.com/questions/139452/kernel-ntfs-driver-vs-ntfs-3g)
  * 筆記 linux-support-ntfs-by-ntfs-3g [link](http://paul.pixnet.net/blog/post/11120651-%5B%E7%AD%86%E8%A8%98%5Dlinux-support-ntfs-by-ntfs-3g)
  
