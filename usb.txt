USB

target: this document collects summaries of reviewing C++

history:
	2017/05/02	init

http://wiki.csie.ncku.edu.tw/embedded/USB

USB由幾種Protocol Layers所組成，資料藉由Pipes傳輸。

Stream Pipes
可以被Host或者Device控制
資料的傳輸方向必須事先定義，定義為IN或或OUT

支援 Bulk Transfers, Isochronous Transfers, and Interrupt Transfers. (have no defined USB format)

Message Pipes
為Host控制來進行資料傳輸設定，允許雙向通訊。
只支援 Control Transfers。（have a defined USB format）


每個Endpoint只能有一個傳輸方向
Endpoint 0 例外，可以有IN和OUT的雙向傳輸（透過Message Pipe），用來控制裝置（Device)。

傳輸型態
控制傳輸（Control Transfers) ： 用於控制傳輸命令及狀態操作。像是設定裝置、取得裝置資訊、發送指令到裝置等。每個USB裝置都有一個Endpoint 0，USB Core就是使用他在裝置插入後進行設定。

中斷傳輸（Interrupt Transfers) ： 與一般常見的中斷不同，需要 host 端先詢問(Polling)才會執行。用一個固定速傳輸少量資料，像是USB鍵盤和滑鼠就是屬於這種方式。
    
批次傳輸（Bulk Transfers）：用於大量資料傳輸且需要確保資料無誤（如傳給印表機或隨身碟），沒有速度限制，若傳輸失敗就會重傳以確保正確。
    
同時傳輸（Isochronous Transfers) ： 同樣用於大量資料傳輸，但不確保資料是否到達。例如例如USB視訊裝置，使用者會期望傳輸聲音或影像的速率是穩定的，若有幾張frame遺失，沒有通過CRC資料也不會重傳。

封包是組成USB傳輸的最小單位。
Transaction指USB資料的傳輸，
一個 Transaction 通常由三個封包組成，大部分的傳輸包含了三種封包，但依傳輸型態而定，一個 Transaction 可能包含一個、兩個、三個封包。

為了確保同步，USB把時間切割成固定長度的小區間。低速和全速的時候是以 1 ms 為單位，稱為一個Frame；高速時再把一個Frame切成八等分，一個 0.125 ms 為單位，稱為microframes。


Transaction可能是從Host傳向Device，或是從Device傳向Host。
傳送方向是由Token packet中指定。
一般來說，目標端利用Handshake (Status packet) 來判斷本次傳輸是否成功。


