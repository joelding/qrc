ARCH=arm CROSS_COMPILE=arm-hisiv500-linux- 


///////////////////////////////////////////////////////////////////////////
11/13

Q: How to revert files in a git to a certain commit?

	mpp_big-little/sample/common/sample_comm.h
	mpp_big-little/sample/common/sample_comm_audio.c
	need to be recovered

	TODO: compare with original common codes






///////////////////////////////////////////////////////////////////////////////
11/10

Usage:
  dm-tool [OPTION...] COMMAND [ARGS...] - Display Manager tool

Options:
  -h, --help        Show help options
  -v, --version     Show release version
  --session-bus     Use session D-Bus

Commands:
  switch-to-greeter                                    Switch to the greeter
  switch-to-user USERNAME [SESSION]                    Switch to a user session
  switch-to-guest [SESSION]                            Switch to a guest session
  lock                                                 Lock the current seat
  list-seats                                           List the active seats
  add-nested-seat [--fullscreen|--screen DIMENSIONS]   Start a nested display
  add-local-x-seat DISPLAY_NUMBER                      Add a local X seat
  add-seat TYPE [NAME=VALUE...]                        Add a dynamic seat



  * cross compile alsa utils
./configure --host=arm-hisiv500-linux 
--disable-python \
--prefix=/mnt/alsa_install \
--with-alsa-inc-prefix=/nfsshare/mnt/alsa_install/include \
--with-alsa-prefix=/nfsshare/mnt/alsa_install/lib \
--disable-alsamixer \
--disable-xmlto
    make; make install DESTDIR=/nfsshare

ebaina [求助] alsa-utils 和 aplay 移植到嵌入式系统 [link](http://bbs.ebaina.com/thread-3856-1-1.html)

# aplay -l
**** List of PLAYBACK Hardware Devices ****
card 0: PCH [HDA Intel PCH], device 0: ALC662 rev1 Analog [ALC662 rev1 Analog]
  Subdevices: 1/1
  Subdevice #0: subdevice #0
card 0: PCH [HDA Intel PCH], device 3: HDMI 0 [HDMI 0]
  Subdevices: 1/1
  Subdevice #0: subdevice #0

# ls /dev/snd/
timer

 # cat /proc/asound/cards 
--- no soundcards ---

# cat /proc/asound/devices 
 33:        : timer

# ./aplay -l
aplay: device_list:268: no soundcards found...


[link](http://free-electrons.com/doc/legacy/audio/embedded_linux_audio.pdf)


vim zM: close all; zR: open all; 
zm: close the source file by one more level; zr: open the source file by  one more level



///////////////////////////////////////////////////////////////////////////////
11/09

# ALSA
  * Advanced Linux Sound Architecture
  * a software framework of the Linux kernel
  * provides an application programming interface (API) 
  * for sound card device drivers
  * bundles a user-space library for application developers

  * cross compile alsa lib
    ./configure --host=arm-hisiv500-linux --disable-python --prefix=/mnt/alsa_install
    make; make install DESTDIR=/nfsshare

references:
1. Advanced Linux Sound Architecture (ALSA) project homepage 
  [link](https://www.alsa-project.org/)
2. alsa-lib及alsa-utils成功移植
  [link](http://blog.sina.com.cn/s/blog_7d7e9d0f0101lqlp.html)
3. arm cross compile issue 
  [link](https://stackoverflow.com/questions/36195926/alsa-util-1-1-0-arm-cross-compile-issue)

ALSA_CONFIG_PATH



/mnt # usb 2-1: new SuperSpeed USB device number 7 using xhci-hcd
usb 2-1: LPM exit latency is zeroed, disabling LPM.
usb 2-1: Int endpoint with wBytesPerInterval of 1024 in config 1 interface 2 altsetting 0 ep 133: setting to 64
uvcvideo: Found UVC 1.00 device 1E04-INOGENI 4K2USB3 (2997:0004)
hid-generic 0003:2997:0004.0002: device has no listeners, quitting


uvcvideo: Found UVC 1.00 device AVerMedia USB Device (07ca:0110)
uvcvideo: UVC non compliance - GET_DEF(PROBE) not supported. Enabling workaround.



Burn images to the SPI flash.

a 16 MB SPI flash is used as an example.

    1) Address space
        |      1 MB     |      4 MB     |     11 MB     |
        |---------------|---------------|---------------|
        |     boot      |     kernel    |     rootfs    |

1) Burn the U-boot.
	mw.b 82000000 ff 100000
	tftp 82000000 u-boot-hi3519v101.bin
	sf probe 0
	sf erase 0 100000
	sf write 82000000 0 100000	
	reset    

	Note that the network parameters need to be reconfigured after the reset.

2) Burn the kernel.
	mw.b 82000000 ff 400000
	tftp 82000000 uImage_hi3519v101
	sf probe 0;sf erase 100000 400000;sf write 82000000 100000 400000

3) Burn the file system.
	mw.b 82000000 ff B00000;
	tftp 82000000 rootfs_hi3519v101_64k.jffs2
	sf probe 0;sf erase 500000 B00000;sf write 82000000 500000 B00000

4) Set boot parameters. 
(Note that the file system is read-only by default for the linux-3.18.y kernel. 
Therefore, the rw option needs to be added to bootargs so that the file system can be read and written.)
		



///////////////////////////////////////////////////////////////////////////////
set ethaddr 00:00:23:34:45:66
set bootdelay 1; set baudrate 115200; 

set bootfile uImage; 
set fileaddr 82000000
set filesize 4B1D34 
 
set ipaddr 192.168.0.50;set serverip 192.168.0.100;set netmask 255.255.255.0

set bootargs 'mem=64M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 rw mtdparts=hi_sfc:1M(boot),4M(kernel),11M(rootfs) ip=dhcp'

set bootcmd 'sf probe 0;sf read 0x82000000 0x100000 0x400000;bootm 0x82000000'

stdin=serial
stdout=serial
stderr=serial
verify=n

///////////////////////////////////////////////////////////////////////////////



一般在以下情況, 我們會進行移植 Linux Kernel 的動作.
1. 將新版 Linux Kernel 移植到全新 SoC 上
  開發人員為 SoC 廠商(e.g. MTK, TI, Allwinner) R&D engineer.
  在此階段的移植, 需要寫 dtsi, low-level code (位於 arch// 底下) 以及 SoC 相關的底層驅動程式. 並且須確保 SoC 功能運行正常.
2. 將新版 Linux Kernel 移植到全新平台上
  開發人員為硬體廠的軟體 R&D engineer, 開發板 (e.g. beagleboard, RPi) 上游開發人員或者是一些 software consultant.
  在此階段的移植, 需要建立 dts 來描述硬體資訊, 並適度修改 dtsi. 此外也需要根據硬體/ 週邊/ 平台資訊來建立屬於板子的 Kernel  config. 檔. 並且須確保硬體/ 週邊/ 平台功能運行正常.
3. 將新版 Linux Kernel 移植到舊有平台上進行 Kernel 版本升級
  開發人員為任何有興趣的 Maker. 只要有開發版即可進行 (e.g. beagleboard, RPi). 一般來說, Linux Kernel 移植大多屬於此範疇.
  在此階段的移植, 需要根據 dtsi 的版本差異來微調 dts 格式. 此外也需要根據 Kernel 版本差異資訊來微調板子的 Kernel  config. 檔.
  此外也須參照舊有 Kernel source 上的 in-house patch 來修改新版 Kernel source.
  *  另外還有像將 Linux Kernel 移植到全新 CPU architecture 上面這種較罕見的情況.

在移植 Linux Kernel 時, 最重要的第一步就是讓機器可以 ” 開機 “. Kernel 能正常開機往下執行, 我們才能進行後續移植動作.
在無法開機的情況下 (請見下圖), 由於沒有任何錯誤訊息, 所以除錯上會比較困難.
一旦可以開機, 畫面有訊息列印出來, 即便有其他問題, 相對起來也比較好解.

最常遇到開不了機的現象就是 hang 在 “Starting Kernel” 這邊.
在這個階段 bootloader 把 Linux Kernel 載入 Memory 位址 0x80008000, 並將 CPU 控制權交給 Linux Kernel. 此時理因跳轉到 Linux Kernel 第一條指令 [1], 接著 Kernel 開始自解壓縮進行後續開機流程 [2].
如果在這個階段卡住, 代表 Linux Kernel 沒有正確運行, 原因可分成下列幾點

無法開機根因 	可能發生時機 	解決方法
SoC low-level code 有問題 	將 Linux 移植到新 SoC 上 	

修改 low-level code, 並確保 SoC 裡功能可正常運行. 有可能需要在 driver 中以 work-around 手法避掉問題.
舊有 DTS 與 新板 DTSI不相容 	

將新 Linux Kernel 移植到舊有平台上進行Kernel 升級
	閱讀 dtsi git 修改歷程, 並詳細閱讀 “Documentation/devicetree/bindings/” 相關文件.
硬體設計有問題 	

    將 Linux 移植到新 SoC上
    將新 Linux Kernel 移植到全新平台上

	和 Hardware/ Bootloader 部門 R&D 工程師協同合作, 一起看硬體線路除蟲
Console port 設定錯誤 	

    將 Linux 移植到新 SoC上
    將新 Linux Kernel 移植到全新平台上
    將新 Linux Kernel 移植到舊有平台上進行Kernel 升級

	

每一塊板子的 Console port device node 都需根據硬體設計以及 driver 設計來進行設定. 如果設定錯誤, 會導致訊息出不來

一般情況下 console device node 為 ttyS0, baud: 115200
Boot code program (包含bootloader) 與 Kernel 不相容 	

    將 Linux 移植到新 SoC上
    將新 Linux Kernel 移植到全新平台上
    將新 Linux Kernel 移植到舊有平台上進行Kernel 升級

	

需確認 boot code program 版本與 Kernel 版本是相對應的. 尤其有些 SoC 的設計會有多個 boot code program.
DTB 跟 Kernel memory 位址衝突 	

    將 Linux 移植到新 SoC上
    將新 Linux Kernel 移植到全新平台上
    將新 Linux Kernel 移植到舊有平台上進行Kernel 升級

	boot code program 需要注意避免將兩者 memory 位址設太近導致衝突.
DTB 檔跟 Kernel 並不相容 	

    將 Linux 移植到新 SoC上
    將新 Linux Kernel 移植到全新平台上
    將新 Linux Kernel 移植到舊有平台上進行Kernel 升級

	記得重新編譯 Kernel 時, 也要一併重新編譯 DTB. 並確保兩者是成對的.
Kernel config 檔中的 ARCH 相關資訊設定錯誤 	

    將 Linux 移植到新 SoC上
    將新 Linux Kernel 移植到全新平台上
    將新 Linux Kernel 移植到舊有平台上進行Kernel 升級

	確定 SoC 種類, 並到Kernel 選單 –  System Type 中選取對應的選項

reference:
[1] 移植 Linux Kernel 造成無法開機之解決方案以及除錯工具[link](http://szlin.me/2017/05/17/unable-to-boot-with-linux-kernel)




///////////////////////////////////////////////////////////////////////////////

11/08

According to [2], data in a wave file are arranged by channels. For NumChannels = 2; BitsPerSample = 16 - see [1] for the definition of BitsPerSample, the data are arranged as [left channel][right channel][L][R]...
00 00 00 00 
24 17 1e f3 
3c 13 3c 14 
16 f9 18 f9 
34 e7 23 a6 
3c f2 24 f2 
11 ce 1a 0d

In wave file, no such an idea as "frames". 

References:
[1] WAVE PCM soundfile format [link](http://soundfile.sapp.org/doc/WaveFormat/)
(http://stenlyho.blogspot.tw/2015/12/audio-wave-format-specification.html)
[2] Multiple channel audio data and WAVE files [link](https://msdn.microsoft.com/en-us/library/windows/hardware/dn653308(v=vs.85).aspx)
[3] Audio File Format Specifications [link](http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html)








///////////////////////////////////////////////////////////////////////////////

11/07

TODO:
0.5 Trace sample_audio.c
1. Feed PCM file to memory, DMA to AIO, and then DA to output
2. Feed PCM file to memory, DMA to AIO, and I2S to HDMI TX 

* Trace option 2: read audio stream from file, decode and send to AO
* SAMPELE_AUDIO_AdecAo();
* SAMPLE_COMM_AUDIO_CfgAcodec();










///////////////////////////////////////////////////////////////////////////////

11/06

arm-hisiv500-linux-objcopy --gap-fill=0xff -O binary u-boot u-boot.bin
osdrv/tools/pc_tools/uboot_tools/
mkboot.sh reg_info.bin u-boot-hi3519v101.bin
# mw.b 0x82000000 ff 0x100000
# tftp 0x82000000 u-boot.bin
# sf probe 0
# sf erase 0x0 0x100000
# sf write 0x82000000 0x0 0x100000


Q: How can GNU toolchain relocate u-boot binary image when linking archive files?

Q: How do I know the address where u-boot stores environment parameters?

BOOT_SEL0

HiTool: using usb-to-serial is better than using on-mainboard uart port.

SW1.3 ->1 bootrom; ->0 

Q: What is the difference between PCM and I2S?
I2S:
  * 4-wire interface: bit clocke (BCLK), left/right clock (LRC), Tx, Rx lines
  * 3 operating modes: I2S, left justfied, right justfied
PCM:
  * 4-wire interface: bit clocke (BCLK), sync (SYNC), Tx, Rx lines
  * 2 operating modes: A and B

references:
1. kernel documentation on Digital Audio Interface [link](Documentation/sound/alsa/soc/DAI.txt)
2. [link](http://blog.csdn.net/azloong/article/details/6536855)


///////////////////////////////////////////////////////////////////////////////
11/03

Q: How to compile a dts file?


Q: Where Kocha code is?
  ap.git/dm365/interface/avm/kocha_*

Hi3519V101 SDK setup the SoC in u-boot:
1. from osdrv/tools/pc/uboot_tools/mkboot.sh 
original u-boot is split into two 
[first 64 byte][reg_info data up to 5120 bytes, padded with 0][the rest of u-boot]


Q: How to show a binary file?
  hexdump -C <file>
  dhex <file>
Q: How to compare two binary files?
  cmp -l <file 1> <file 2>
Q: How to use visual tool to compare two binary files
  vbindiff <file 1> <file 2>


Hi3519V101-uboot-DDR3_1866M_32bit_1GB-A7_792M-A17_930M-BUS_200M.xls


Q: How to copy to the clipboard in OpenBox?
  Ctrl+Shift+C to copy; mouse mid-button to paste




references:
  [1] https://lists.denx.de/pipermail/u-boot/2008-May/034702.html


///////////////////////////////////////////////////////////////////////////////
11/02

Q: v4l2-framework.txt does not talk about video buffer. What else talks about it?

Q: How to use I2S of Si3519V101 and make HDMI out with stereo audio? (Dave)

On the chip, pins relating to I2S input and output are:
AB23: JTAG_EN

AB24: I2S_BCLK_TX
AC23: I2S_WS_TX
AD23: I2S_SD_TX

AC24: I2S_MCLK

AC22: I2S_BCLK_RX
AB21: I2S_WS_RX
AD22: I2S_SD_RX

1. Remove R74 to disable JTAG function
2. Connect to SD0/1/2/3/MCLK/SCK/WS_DR0

Q: How to select pin functions of Si3519V101 (setup pin multiplexing)?

Q: hisi-hi3519v101-demb.dts and hisi-hi3519v101-hmp-demb.dts - which is in use?

Q: How does a bootloader bring dtb to kernel?
bootm <address> - <>

Q: Must dtb explicitly load via u-boot bootm? This article said dtb can be integrated into uboot or separately loaded [link](http://blog.csdn.net/ooonebook/article/details/53206623)

* Device Tree
  * ARM Linux 2.6，arch/arm/plat-xxx和arch/arm/mach-xxx中充斥着描述板级细节的代码
    * 板上的platform设备、resource、i2c_board_info、spi_board_info以及各种硬件的platform_data。
  * 是一种描述硬件的数据结构
  * 画一棵电路板上CPU、总线、设备组成的树
  * 结点（node）和属性（property）组成
    * 结点本身可包含子结点
    * 属性是成对出现的name和value
  * DTS (device tree source) -> DTC (device tree compiler) -> Device Tree Blob (.dtb) 
  * bootloader将这棵树传递给内核在引导kernel的过程中，会先读取该.dtb到内存。
  * .dtsi: 提炼SoC公用的部分或者多个machine共同的部分



references:
[1] ARM Linux 3.x的设备树（Device Tree）宋宝华 http://blog.csdn.net/21cnbao/article/details/8457546
[2] The Devicetree Specification https://www.devicetree.org/
[3] Thomas Petazzoni, Device Tree for Dummies. Presentation [link](http://free-electrons.com/pub/conferences/2013/elce/petazzoni-device-tree-dummies/petazzoni-device-tree-dummies.pdf); talk for Embedded Linux Conference Europe [link](https://youtu.be/m_NyYEBxfn8)
[4] Device Tree Usage [link](https://elinux.org/Device_Tree_Usage) 
  targeting at how to write a device tree for a new machine
[5] Kernel documentation [link](Documentation/devicetree)

///////////////////////////////////////////////////////////////////////////////
11/01

How to write an i2c-controlled video decoder/encoder driver?

* V4L2 driver tends to be complex. 
  => V4L2 framework, providing basic building blocks
* V4L2 drivers apple to audio/video muxing/encoding/decoding ICs, "sub-devices",
  * connected to the main bridge driver through I2C busses
  * bus or host controller is called a parent device
* example: v4l2-pci-skeleton.c, a skeleton driver for a PCI capture card
* structure of a driver must have
  * the device state: one for each device instance
  * a way to init and command sub-devices
  * create v4l2 device nodes and device-node specific data
  * Filehandle-specific structs and per-filehandle data
  * video buffer handling

references:
1. Overview of the V4L2 driver framework [link](http://elixir.free-electrons.com/linux/v3.18.20/source/Documentation/video4linux/v4l2-framework.txt)
2. [link](http://elixir.free-electrons.com/linux/v3.18.20/source/Documentation/video4linux/v4l2-controls.txt)
3. [link](https://archive.fosdem.org/2014/schedule/event/v4l_intro/attachments/slides/448/export/events/attachments/v4l_intro/slides/448/v4l2_frameworks.pdf)




struct xxx_state {
	struct v4l2_subdev sd;
	struct v4l2_ctrl_handler ctrl_handler;
	...
};


#include <v4l2/v4l2-common.h>

/* fill in all the fields of v4l2_subdev;
   ensure the v4l2_subdev and i2c_client both point to one another */
v4l2_i2c_subdev_init(&state->sd, client, subdev_ops); 

v4l2_ctrl_handler_init(&state->ctrl_handler, nr_of_controls);

static inline struct xxx_state *to_state(struct v4l2_subdev *sd)
{
	return container_of(sd, struct xxx_state, sd);
}

struct i2c_client *client = v4l2_get_subdevdata(sd);
struct v4l2_subdev *sd = i2c_get_clientdata(client);


v4l2_device_unregister_subdev(sd);


TODO:
v4l2_i2c_new_subdev(v4l2_dev, adapter, "module_foo", "chipid", 0x36, NULL);



---------------------------------------------------------------------------------------

sample_tde shows a quarter sized backgroud with some pictures moving around.



---------------------------------------------------------------------------------------
Good resoures: http://free-electrons.com/doc/legacy/


-------------------------------------------------------------------------------








object檔修改工具 - objcopy


-------------------------------------------------------------------------------

## 亂序執行
* out-of-order execution
* aka: OoOE, OOE

ref
* Out-of-order execution [link](https://en.wikipedia.org/wiki/Out-of-order_execution)
* 乱序执行 [link](https://zh.wikipedia.org/wiki/%E4%B9%B1%E5%BA%8F%E6%89%A7%E8%A1%8C)

-------------------------------------------------------------------------------

ref
* http://capricorn-liver.blogspot.tw/2010/11/cbmp.html

-------------------------------------------------------------------------------
## GUID Partition Table
* aka GPT
* a part of the Unified Extensible Firmware Interface (UEFI) standard, as a replacement for the PC BIOS
* MBR (Master boot record) partitioning scheme
  * The original version of the MBR was written by David Litton of IBM in June 1982
  * introduced with IBM PC DOS 2.0 in March 1983 in order to support the 10 MB hard disk of the then-new IBM Personal Computer XT, still using the FAT12 file system
  * use 32 bits for storing block addresses
  * limit: 512 bytes/sector * (2 ^ 32) = 2 ^ 41 = 2 Tbytes maximum

* advantages over the MBR: 
  * use 64 bits for storing block addresses
  * limit: 512 bytes/sector * (2 ^ 64) = 2 ^ 73 = 8 Zbytes maximum
  * more partitions is possible, depending on operating system supports
  * TODO
    
* Major Linux distros support GPT: Fedora above 8, Ubuntu above 8.04+ with tools such as gdisk, GNU Parted, util-linux v2.23+ fdisk, SYSLINUX, GRUB 0.96 + patches and GRUB 2 have been GPT-enabled.
  * kernel config CONFIG_EFI_PARTITION option enables GPT support in the kernel
    
  * command "blkid"
  * command "gdisk"
  * command "lsblk"
  
* ref
  * wiki MBR [link](https://en.wikipedia.org/wiki/Master_boot_record)
  * wiki GPT [link](https://en.wikipedia.org/wiki/GUID_Partition_Table)
  * k-M-G-T-P-E-Z-Y [link](http://ioanaspune.ro/wp-content/uploads/2015/03/tabel-1014x1024.jpg)
  * GPT kernel support [link](https://wiki.archlinux.org/index.php/partitioning#GPT_Kernel_Support)
  * TI Linux Core U-Boot User's Guide talking about how to use u-boot to make a GPT eMMC and boot from it [link](http://processors.wiki.ti.com/index.php/Linux_Core_U-Boot_User%27s_Guide)
  
## File System
  
  
  
* ref
  * Kernel NTFS driver vs NTFS-3G [link](https://superuser.com/questions/139452/kernel-ntfs-driver-vs-ntfs-3g)
  * 筆記 linux-support-ntfs-by-ntfs-3g [link](http://paul.pixnet.net/blog/post/11120651-%5B%E7%AD%86%E8%A8%98%5Dlinux-support-ntfs-by-ntfs-3g)
  


## Build GStreamer with cerbero

```
$ git clone git://anongit.freedesktop.org/gstreamer/cerbero
$ ./cerbero-uninstalled -c config/xxx.cbc bootstrap
```
wipe : Wipes everything to restore the build system
bootstrap : 下载并安装当前环境下编译时所需工具
build : 编译某个recipe，包括其依赖项
buildone : 编译某个recipe，不包括其依赖项
cleanone : 清理某个recipe

```
$ ./cerbero-uninstalled -c config/xxx.cbc package gstreamer-1.0
```

reference:
* Building from source using Cerbero [link](https://gstreamer.freedesktop.org/documentation/installing/building-from-source-using-cerbero.html)
* GStreamer SDK 1.0 Build Via Cerbero [link](http://www.jianshu.com/p/7863404c1909)















---------------------------------------------------------------------------------------



WARNING: No specific packager available for the distro version none_uclibc, using generic packager for distro none
-----> Creating package for gstreamer-1.0
WARNING: Some libraries weren't found while searching!
libgstgl-1.0
WARNING: Some libraries weren't found while searching!
libwebrtc_audio_processing
WARNING: Some libraries weren't found while searching!
libgstvalidate-preload-1.0
***** Error running 'package' command:
The following files required by this package are missing:
 lib/gstreamer-1.0/libgstopengl.so
lib/gstreamer-1.0/libgstaudiovisualizers.so



---------------------------------------------------------------------------------------

How to modify git site




---------------------------------------------------------------------------------------








Download the source
    https://gstreamer.freedesktop.org/download/

./configure CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnurabi-g++ --host=arm-linux --build=i686-linux --prefix=/home/kclin/workspace/cross_result/pkg_config/ RANLIB=arm-linux-gnueabi-ranlib LD=arm-linux-gnueabi-ld --cache-file=arm-linux.cache LIBS="-L/home/kclin/workspace/cross_result/pkg_config/lib -lffi" CFLAGS="-I/home/kclin/workspace/cross_result/pkg_config/lib/libffi-3.0.13/include -I/home/kclin/workspace/cross_result/pkg_config/include"

make && make install



make OSDRV_CROSS=arm-hisiv500-linux CHIP=hi3519v101 FLASH_TYPE=spi all


a003257@ubuntu:~/avm/T533C$ ./sdk.unpack 
Unpacking SDK
WARN: Be sure you have installed the cross-compiler. if not, install it first!
WARN: ALL THE SOUCE FILES WILL BE OVERWRITED, FILES YOU MOTIFIED WILL BE LOST !!!

OS_TYPE  =linux
SDK_CHIP =hi3519v101
CUSTOMER_VERSION =
unpacking osal
run_command_progress_float: 'tar -xvzf package/osal.tgz'
[100%]##################################################|
unpacking osdrv
run_command_progress_float: 'tar -xvzf package/osdrv.tgz'
[100%]##################################################|
unpacking linux kernel
run_command_progress_float: 'tar -xvzf osdrv/opensource/kernel/linux-3.18.y.tgz -C osdrv/opensource/kernel/'
[100%]##################################################|
unpacking mpp_big-little
mkdir: created directory 'mpp_big-little'
run_command_progress_float: 'tar -xvzf package/mpp_big-little.tgz'
[100%]##################################################|
unpacking drv
mkdir: created directory 'drv'
run_command_progress_float: 'tar -xvzf package/drv.tgz'
[100%]##################################################|




hisilicon # printenv
bootdelay=1
baudrate=115200
bootfile="uImage"
filesize=4B9D7C
fileaddr=82000000
netmask=255.255.255.0
bootargs=mem=64M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 rw mtdparts=hi_sfc:1M(boot),3M(kernel),28M(rootfs)
bootcmd=sf probe 0;sf read 0x82000000 0x100000 0x300000;bootm 0x82000000

serverip=10.1.9.108
nfshost=10.1.9.108
ipaddr=10.1.9.124
gatewayip=10.1.9.254
ethaddr=00:00:23:34:45:66

stdin=serial
stdout=serial
stderr=serial
verify=n
ver=U-Boot 2010.06 (Nov 30 2016 - 19:59:33)




setenv bootargs mem=64M console=ttyAMA0,115200 


setenv bootargs mem=64M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 rw mtdparts=hi_sfc:1M(boot),3M(kernel),28M(rootfs) ip=dhcp

setenv bootargs mem=32M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 rw mtdparts=hi_sfc:1M(boot),3M(kernel),28M(rootfs) ip=dhcp


set bootcmd 'sf probe 0;sf read 0x82000000 0x100000 0x300000;bootm 0x82000000'
set bootargs 'mem=64M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 rw mtdparts=hi_sfc:1M(boot),3M(kernel),28M(rootfs) ip=dhcp'
set ipaddr 192.168.0.50
set serverip 192.168.0.100


---------------------------------------------------------------------------------------


hisilicon # printenv
bootdelay=1
baudrate=115200
bootfile="uImage"
filesize=4B9D7C
fileaddr=82000000
netmask=255.255.255.0
bootargs=mem=64M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 rw mtdparts=hi_sfc:1M(boot),3M(kernel),28M(rootfs)
bootcmd=sf probe 0;sf read 0x82000000 0x100000 0x300000;bootm 0x82000000
serverip=10.1.9.108
nfshost=10.1.9.108
ipaddr=10.1.9.124
gatewayip=10.1.9.254
ethaddr=00:00:23:34:45:66
stdin=serial
stdout=serial
stderr=serial
verify=n
ver=U-Boot 2010.06 (Nov 30 2016 - 19:59:33)




setenv bootargs mem=64M console=ttyAMA0,115200 


setenv bootargs mem=64M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 rw mtdparts=hi_sfc:1M(boot),3M(kernel),28M(rootfs) ip=dhcp

setenv bootargs mem=32M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 rw mtdparts=hi_sfc:1M(boot),3M(kernel),28M(rootfs) ip=dhcp






sample/vio/sample_vio.c

__HuaweiLite__ is NOT used.

VO_INTF g_enVoIntfType video output interafce type

SAMPLE_VI_CONFIG_S video input configuration type

SENSOR_TYPE is defined in sample/Makefile.param

struct is typedefined as _S.


(gst-inspect-1.0:148): GStreamer-WARNING **: External plugin loader failed. This most likely means that the plugin loader helper binary was not found or could no.

(gst-inspect-1.0:148): GStreamer-WARNING **: Failed to load plugin '/mnt/linux_armv7/lib/gstreamer-1.0/libgstlibav.so': File not found

./gst-inspect-1.0: symbol '_ZN2cv3Mat10deallocateEv': can't resolve symbol

./gst-inspect-1.0: symbol 'cvCreateImageHeader': can't resolve symbol

./gst-inspect-1.0: symbol 'cvReleaseImage': can't resolve symbol

./gst-inspect-1.0: symbol '_ZN9_IplImageC1ERKN2cv3MatE': can't resolve symbol

./gst-inspect-1.0: symbol 'cvCopy': can't resolve symbol

./gst-inspect-1.0: symbol 'cvCreateImage': can't resolve symbol

./gst-inspect-1.0: symbol '_ZN2cv8fastFreeEPv': can't resolve symbol

(gst-inspect-1.0:148): GStreamer-WARNING **: Failed to load plugin '/mnt/linux_armv7/lib/gstreamer-1.0/libgstavtremovebgsink.so': unknown dl-error

(gst-inspect-1.0:148): GStreamer-WARNING **: Failed to load plugin '/mnt/linux_armv7/lib/gstreamer-1.0/libgstmatroska.so': File not found
/mnt/linux_armv7/bin # ./gst-inspect-1.0 | tee 2>&1 /mnt/inspect.log

(gst-inspect-1.0:150): GStreamer-WARNING **: External plugin loader failed. This most likely means that the plugin loader helper binary was not found or could no.

(gst-inspect-1.0:150): GStreamer-WARNING **: Failed to load plugin '/mnt/linux_armv7/lib/gstreamer-1.0/libgstlibav.so': File not found

./gst-inspect-1.0: symbol '_ZN2cv3Mat10deallocateEv': can't resolve symbol

./gst-inspect-1.0: symbol 'cvCreateImageHeader': can't resolve symbol

./gst-inspect-1.0: symbol 'cvReleaseImage': can't resolve symbol

./gst-inspect-1.0: symbol '_ZN9_IplImageC1ERKN2cv3MatE': can't resolve symbol

./gst-inspect-1.0: symbol 'cvCopy': can't resolve symbol

./gst-inspect-1.0: symbol 'cvCreateImage': can't resolve symbol

./gst-inspect-1.0: symbol '_ZN2cv8fastFreeEPv': can't resolve symbol

(gst-inspect-1.0:150): GStreamer-WARNING **: Failed to load plugin '/mnt/linux_armv7/lib/gstreamer-1.0/libgstavtremovebgsink.so': unknown dl-error

(gst-inspect-1.0:150): GStreamer-WARNING **: Failed to load plugin '/mnt/linux_armv7/lib/gstreamer-1.0/libgstmatroska.so': File not found
