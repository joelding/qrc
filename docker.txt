本文件針對需要交叉編譯的軟韌體工程師撰寫，收錄常用、實用的指令便於快速查表。

Docker 是新的虛擬化方式，比傳統的虛擬機啟動快、效能高。開發人員使用已經設定好的映像檔，可以節省設定編譯環境的時間。

基本概念：映像檔（ image ）
• 是一個唯讀的模板
• 可以是一個完整的 Ubuntu 作業系統環境，裡面安裝使用者需要的應用程式
• 可以用來建立容器
基本概念：容器（ container ）
• 是從映像檔建立的執行實例
• 在唯讀的映像檔上建立一層可寫層
• 可以啟動、開始、停止、刪除
• 每個容器彼此隔離
基本概念：倉庫 （ repository ）
• 集中存放映像檔檔案
• 倉庫分為公開（ Public ）和私有（ Private ）兩種
• 映像檔可以 push 上傳到倉庫
基本概念：倉庫註冊伺服器 （ Registry ）
• 存放多個倉庫，每個倉庫中又包含了多個映像檔，每個映像檔有不同的標籤（ tag ）。

安裝：
在 Windows 、 macOS 、 Linux 上都可以使用Docker 。但對不同版本的操作系統，有不同的要求。例如在 Linux 上安裝 Docker 的條件，一定要 64 位元 Linux 、核心 3.10 以上。 Ubuntu 版本套件庫中內建 Docker 套件，可以直接安裝
$ sudo apt-get install docker.io
也可以加入 repository 隨時保持最新版本。安裝步驟與細節請自行按個人需求查閱官網。

安裝後設定：
$ sudo service docker start # 啟動 Docker 服務
$ sudo usermod -aG docker $USER # 准許一般用戶使用 Docker

安裝後測試：
$ docker pull hello-world
$ docker run hello-world
出現以下訊息則為成功：
Hello from Docker!
This message shows that your installation appears to be working correctly.

查詢指令：
$ docker –help
$ docker COMMAND --help

下載映像檔：
$ docker pull NAME

列出電腦上已有的映像檔：
$ docker images

利用 Dockerfile 建立映像檔：
$ docker build -t="REPOSITORY:TAG" .

列出所有容器：
$ docker ps -a

新建並啟動容器：
$ docker run -t -i REPOSITORY:TAG /bin/bash

新建、啟動容器、並掛載源碼目錄：
$ docker run -v
LOCAL_DIRECTORY:MOUNT_DIRECTORY -t -i REPOSITORY:TAG /bin/bash
在容器中下 exit 命令來退出終端時，所建立的容器立刻終止。

停止一個容器：
$ docker stop CONTAINER_ID

啟動執行一個已經終止的容器：
$ docker start -ia CONTAINER_ID

移除電腦上的容器：
$ docker rm CONTAINER

移除電腦上的映像檔：
$ docker rmi IMAGE